# This is a basic workflow to help you get started with Actions

name: Sync with test servers

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Setup SSH Keys and known_hosts
        env:
            SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
            ssh-agent -a $SSH_AUTH_SOCK > /dev/null
            ssh-add - <<< "${{ secrets.DEPLOY_KEY }}"

    # Runs a set of commands using the runners shell
      - name: Sync with game servers
        env:
            SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
            mapfile -t servers < <(curl -s https://raw.githubusercontent.com/potato-tf/deploy/refs/heads/main/serverlist.json | jq -r '.servers[]')
            for i in "${servers[@]}"; do a=( $i );
            {
                rsync -a --chmod=777 --mkpath -e "ssh -p ${a[0]} -o StrictHostKeyChecking=no" ./tf/* ${a[1]}:${a[2]}/tf2server/tf/zi/
                ssh -p ${a[0]} ${a[1]} "ln -sfn ${a[2]}/tf2server/tf/zi ${a[2]}/www/html/gameassets/"
                ssh -p ${a[0]} ${a[1]} "while IFS= read -r mapname || [ -n \"$mapname\" ]; do cp -r --update=none ${a[2]}/tf2server/tf/cfg/downloads_zi.kv ${a[2]}/tf2server/tf/maps/$mapname.res; done < ${a[2]}/tf2server/tf/cfg/mapcycle_zi.txt"
            } &
            done
            wait